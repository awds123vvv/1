name: 自动部署 Hysteria2 (优化版)

on:
  workflow_dispatch:
    inputs:
      type:
        description: '选择部署的 Hysteria2 节点类型'
        required: true
        default: 'Hysteria2'
        type: choice
        options:
          - Hysteria2 # 默认且唯一选项，简化用户选择
      region:
        description: '选择部署区域'
        required: true
        default: 'US(free)'
        type: choice
        options:
          # 免费区域
          - SG(free)  # azure新加披 (ap21)
          - US(free)  # aws美国 (us10-001)
          # AWS 区域
          - AWS-AU(Sydney)
          - AWS-BR(São Paulo)
          - AWS-KR(Seoul)
          - AWS-CA(Montreal)
          - AWS-US(VA)
          - AWS-US(OR)
          - AWS-EU(Frankfurt)
          - AWS-JP(Tokyo)
          - AWS-SG(Singapore)
          # GCP 区域
          - GCP-AU(Sydney)
          - GCP-BR(São Paulo)
          - GCP-US(IA)
          - GCP-EU(Frankfurt)
          - GCP-JP(Osaka)
          - GCP-JP(Tokyo)
          - GCP-IL(Tel Aviv)
          - GCP-IN(Mumbai)
          - GCP-KSA(Dammam)
          # Azure 区域
          - Azure-AU(Sydney)
          - Azure-BR(São Paulo)
          - Azure-CA(Montreal)
          - Azure-US(VA)
          - Azure-US(WA)
          - Azure-EU(Netherlands)
          - Azure-JP(Tokyo)
          - Azure-SG(Singapore)
          # SAP Neo 区域
          - Neo-UAE(Dubai)
          - Neo-KSA(Riyadh)
      app_name:
        description: '应用名称（可选，留空则自动生成）'
        required: false
        default: ''
      is_direct_connect:
        description: '启用直连？ (Hysteria2 走CF直连)'
        required: true
        type: boolean
        default: false

env:
  MEMORY: 256M # 保持 256M 内存配置，提高稳定性

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 安装 CF CLI
      run: |
        wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
        echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
        sudo apt-get update
        sudo apt-get install -y cf8-cli

    - name: 确定 CF API 端点、应用名称和 Docker 镜像
      run: |
        # 完整的 CF API 端点映射逻辑
        RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z0-9' | head -c 6)
        REGION_SLUG=$(echo "${{ github.event.inputs.region }}" | tr -dc 'a-zA-Z') # 用于生成应用名称
        APP_NAME_PREFIX="h2-$REGION_SLUG"

        case "${{ github.event.inputs.region }}" in
          "SG(free)") echo "CF_API=https://api.cf.ap21.hana.ondemand.com" >> $GITHUB_ENV; ;;
          "US(free)") echo "CF_API=https://api.cf.us10-001.hana.ondemand.com" >> $GITHUB_ENV; ;;
          "AWS-AU(Sydney)") echo "CF_API=https://api.cf.ap10.hana.ondemand.com" >> $GITHUB_ENV; ;;
          "AWS-BR(São Paulo)") echo "CF_API=https://api.cf.br10.hana.ondemand.com" >> $GITHUB_ENV; ;;
          "AWS-KR(Seoul)") echo "CF_API=https://api.cf.ap12.hana.ondemand.com" >> $GITHUB_ENV; ;;
          "AWS-CA(Montreal)") echo "CF_API=https://api.cf.ca10.hana.ondemand.com" >> $GITHUB_ENV; ;;
          "AWS-US(VA)") echo "CF_API=https://api.cf.us10-001.hana.ondemand.com" >> $GITHUB_ENV; ;;
          "AWS-US(OR)") echo "CF_API=https://api.cf.us11.hana.ondemand.com" >> $GITHUB_ENV; ;;
          "AWS-EU(Frankfurt)") echo "CF_API=https://api.cf.eu10-005.hana.ondemand.com" >> $GITHUB_ENV; ;;
          "AWS-JP(Tokyo)") echo "CF_API=https://api.cf.jp10.hana.ondemand.com" >> $GITHUB_ENV; ;;
          "AWS-SG(Singapore)") echo "CF_API=https://api.cf.ap11.hana.ondemand.com" >> $GITHUB_ENV; ;;
          "GCP-AU(Sydney)") echo "CF_API=https://api.cf.ap30.hana.ondemand.com" >> $GITHUB_ENV; ;;
          "GCP-BR(São Paulo)") echo "CF_API=https://api.cf.br30.hana.ondemand.com" >> $GITHUB_ENV; ;;
          "GCP-US(IA)") echo "CF_API=https://api.cf.us30.hana.ondemand.com" >> $GITHUB_ENV; ;;
          "GCP-EU(Frankfurt)") echo "CF_API=https://api.cf.eu30.hana.ondemand.com" >> $GITHUB_ENV; ;;
          "GCP-JP(Osaka)") echo "CF_API=https://api.cf.jp30.hana.ondemand.com" >> $GITHUB_ENV; ;;
          "GCP-JP(Tokyo)") echo "CF_API=https://api.cf.jp31.hana.ondemand.com" >> $GITHUB_ENV; ;;
          "GCP-IL(Tel Aviv)") echo "CF_API=https://api.cf.il30.hana.ondemand.com" >> $GITHUB_ENV; ;;
          "GCP-IN(Mumbai)") echo "CF_API=https://api.cf.in30.hana.ondemand.com" >> $GITHUB_ENV; ;;
          "GCP-KSA(Dammam)") echo "CF_API=https://api.cf.sa31.hana.ondemand.com" >> $GITHUB_ENV; ;;
          "Azure-AU(Sydney)") echo "CF_API=https://api.cf.ap20.hana.ondemand.com" >> $GITHUB_ENV; ;;
          "Azure-BR(São Paulo)") echo "CF_API=https://api.cf.br20.hana.ondemand.com" >> $GITHUB_ENV; ;;
          "Azure-CA(Montreal)") echo "CF_API=https://api.cf.ca20.hana.ondemand.com" >> $GITHUB_ENV; ;;
          "Azure-US(VA)") echo "CF_API=https://api.cf.us21.hana.ondemand.com" >> $GITHUB_ENV; ;;
          "Azure-US(WA)") echo "CF_API=https://api.cf.us20.hana.ondemand.com" >> $GITHUB_ENV; ;;
          "Azure-EU(Netherlands)") echo "CF_API=https://api.cf.eu20.hana.ondemand.com" >> $GITHUB_ENV; ;;
          "Azure-JP(Tokyo)") echo "CF_API=https://api.cf.jp20.hana.ondemand.com" >> $GITHUB_ENV; ;;
          "Azure-SG(Singapore)") echo "CF_API=https://api.cf.ap21.hana.ondemand.com" >> $GITHUB_ENV; ;;
          "Neo-UAE(Dubai)") echo "CF_API=https://api.cf.neo-ae1.hana.ondemand.com" >> $GITHUB_ENV; ;;
          "Neo-KSA(Riyadh)") echo "CF_API=https://api.cf.neo-sa1.hana.ondemand.com" >> $GITHUB_ENV; ;;
        esac

        # 应用名称逻辑
        if [ -n "${{ github.event.inputs.app_name }}" ]; then
          echo "APP_NAME=${{ github.event.inputs.app_name }}" >> $GITHUB_ENV
        else
          echo "APP_NAME=$APP_NAME_PREFIX-$RANDOM_STR" >> $GITHUB_ENV
        fi

        # Hysteria2 镜像选择逻辑 (假设使用 secrets.HYSTERIA2_DOCKER_IMAGE)
        if [[ -n "${{ secrets.HYSTERIA2_DOCKER_IMAGE }}" ]]; then
          echo "DOCKER_IMAGE=${{ secrets.HYSTERIA2_DOCKER_IMAGE }}" >> $GITHUB_ENV
        else
          # 默认 Hysteria2 镜像（请替换为您的真实镜像）
          echo "DOCKER_IMAGE=your-hysteria2-docker-image:latest" >> $GITHUB_ENV
        fi

        echo "✅ CF API: ${{ env.CF_API }}"
        echo "✅ 应用名称: ${{ env.APP_NAME }}"
        echo "✅ Docker 镜像: ${{ env.DOCKER_IMAGE }}"

    - name: 登录 Cloud Foundry 并自动选择组织/空间
      run: |
        cf login -a ${{ env.CF_API }} -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}"
        
        # 优化：使用更健壮的 'cf target' 自动选择组织和空间
        ORG=$(cf orgs | awk 'NR>3 {print $1; exit}')
        SPACE=$(cf spaces | awk 'NR>3 {print $1; exit}')

        if [ -z "$ORG" ] || [ -z "$SPACE" ]; then
            echo "❌ 错误：未能自动检测到组织或空间。请确保您的账户拥有可用的组织和空间。"
            exit 1
        fi

        echo "ORG=$ORG" >> $GITHUB_ENV
        echo "SPACE=$SPACE" >> $GITHUB_ENV
        
        cf target -o "$ORG" -s "$SPACE"
        echo "🚀 已锁定部署目标: 组织 $ORG / 空间 $SPACE"

    - name: 部署应用
      run: |
        echo "开始部署 ${{ env.APP_NAME }}，使用镜像 ${{ env.DOCKER_IMAGE }}"
        
        # 优化：部署失败后自动清理残留
        if cf push ${{ env.APP_NAME }} --docker-image ${{ env.DOCKER_IMAGE }} -m ${{ env.MEMORY }} -k 256M --health-check-type port; then
          echo "Deployment successful"
        else
          echo "🔥 部署失败，正在清理残留应用 ${{ env.APP_NAME }}..."
          cf delete ${{ env.APP_NAME }} -f
          echo "❌ 伙计,部署失败，可能是资源限制或镜像问题。已清理失败部署残留。"
          exit 1
        fi

    - name: 设置环境变量
      run: |
        echo "开始设置 Hysteria2 环境变量..."
        
        # 基础配置
        cf set-env ${{ env.APP_NAME }} NAME "Hysteria2-SAP"
        cf set-env ${{ env.APP_NAME }} UUID "${{ secrets.UUID }}"
        cf set-env ${{ env.APP_NAME }} SUB_PATH "${{ secrets.SUB_PATH || '/h2' }}"
        
        # Hysteria2 专用配置
        CFIP_VALUE="${{ secrets.CFIP || 'cf.877774.xyz' }}" # 默认值
        cf set-env ${{ env.APP_NAME }} HYSTERIA2_SERVER_NAME "$CFIP_VALUE"
        cf set-env ${{ env.APP_NAME }} HYSTERIA2_LISTEN_PORT 443
        cf set-env ${{ env.APP_NAME }} HYSTERIA2_PROTOCOL "websocket" # Hysteria2 默认配置
        cf set-env ${{ env.APP_NAME }} CFIP "$CFIP_VALUE"
        
        # Cloudflare Argo Tunnel 配置（如果使用）
        if [ "${{ github.event.inputs.type }}" = "Argo隧道CDN" ]; then
            cf set-env ${{ env.APP_NAME }} ARGO_DOMAIN "${{ secrets.ARGO_DOMAIN }}"
            cf set-env ${{ env.APP_NAME }} ARGO_AUTH "${{ secrets.ARGO_AUTH }}"
        fi

        # 监控/通知配置
        cf set-env ${{ env.APP_NAME }} NEZHA_SERVER "${{ secrets.NEZHA_SERVER }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_PORT "${{ secrets.NEZHA_PORT }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_KEY "${{ secrets.NEZHA_KEY }}"
        cf set-env ${{ env.APP_NAME }} CHAT_ID "${{ secrets.CHAT_ID }}"
        cf set-env ${{ env.APP_NAME }} BOT_TOKEN "${{ secrets.BOT_TOKEN }}"
        cf set-env ${{ env.APP_NAME }} CFPORT "${{ secrets.CFPORT }}"

        # 处理直连模式的 DOMAIN 变量
        if [ "${{ github.event.inputs.is_direct_connect }}" = "true" ]; then
          echo "直连模式：获取应用路由作为 DOMAIN..."
          # 必须先执行 cf push 路由才存在，这里确保获取最新的
          ROUTE=$(cf app ${{ env.APP_NAME }} | grep "routes:" | awk '{print $2}')
          if [ -n "$ROUTE" ]; then
            cf set-env ${{ env.APP_NAME }} DOMAIN "$ROUTE"
            echo "✅ DOMAIN 设置为应用路由: $ROUTE"
          else
            echo "⚠️ 警告：未找到应用路由，无法设置 DOMAIN。请手动将节点配置里的address、host和sni改为应用域名。"
          fi
        fi
        
    - name: 应用环境变量并重新启动应用 (Restage)
      run: |
        # 使用 restage 而非 start/stop，确保所有环境变量和配置都生效
        echo "正在应用环境变量并重新启动应用..."
        cf restage ${{ env.APP_NAME }}

    - name: 验证并输出详细部署信息
      run: |
        echo "----------------------------------------"
        echo "🚀 Hysteria2 部署完成！详细信息如下："
        cf app ${{ env.APP_NAME }}
        
        ROUTE=$(cf app ${{ env.APP_NAME }} | grep "routes:" | awk '{print $2}')
        
        echo "----------------------------------------"
        echo "🎯 部署概览："
        echo "区域 (Region): ${{ github.event.inputs.region }}"
        echo "应用名称 (App Name): ${{ env.APP_NAME }}"
        
        if [ -n "$ROUTE" ]; then
          echo "✅ 状态：成功启动"
          echo "🌐 应用 URL (APP_URL): https://$ROUTE"
          echo "----------------------------------------"
          echo "💡 **Hysteria2 客户端配置要点**："
          if [ "${{ github.event.inputs.is_direct_connect }}" = "true" ]; then
             echo "   - 地址/SNI: $ROUTE"
          else
             echo "   - 地址/SNI: $CFIP_VALUE (您在 CFIP 中设置的值)"
          fi
          echo "   - 密码/UUID: ${{ secrets.UUID }}"
          echo "   - 路径 (Path): ${{ secrets.SUB_PATH || '/h2' }}"
        else
          echo "❌ 状态：部署失败或路由未绑定成功。"
          echo "----------------------------------------"
          echo "🔍 下一步：请运行 'cf logs ${{ env.APP_NAME }} --recent' 检查应用日志以诊断问题。"
        fi
        echo "----------------------------------------"
