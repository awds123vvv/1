name: 自动部署 Hysteria2

on:
  workflow_dispatch:
    inputs:
      environment:
        description: '选择部署环境'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      region:
        description: '选择部署区域'
        required: true
        default: 'SG'
        type: choice
        options:
          - SG
          - US
      is_direct_connect:
        description: '启用直连？理论上速度更快'
        required: true
        type: boolean
        default: false

env:
  MEMORY: 128M # <<< 修正点：内存改为 128M，以进行最小化测试

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 安装 CF CLI
      run: |
        wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
        echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
        sudo apt-get update
        sudo apt-get install -y cf8-cli

    - name: 根据输入选择Docker镜像 (强制使用测试镜像)
      run: |
        # 忽略用户输入，强制使用一个小型、稳定的测试镜像来诊断问题
        echo "DOCKER_IMAGE=nginx:alpine" >> $GITHUB_ENV
        echo "已强制使用测试镜像: nginx:alpine"

    - name: 生成应用名称并设置API端点
      run: |
        if [ "${{ github.event.inputs.region }}" = "SG" ]; then
          echo "CF_API=https://api.cf.ap21.hana.ondemand.com" >> $GITHUB_ENV
        elif [ "${{ github.event.inputs.region }}" = "US" ]; then
          echo "CF_API=https://api.cf.us10-001.hana.ondemand.com" >> $GITHUB_ENV
        fi
        
        # 使用更可靠的方式生成随机字符串
        RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z0-9' | head -c 6)
        DEFAULT_APP_NAME="${{ github.event.inputs.region }}-${RANDOM_STR}"
        
        echo "APP_NAME=$DEFAULT_APP_NAME" >> $GITHUB_ENV
        echo "将使用API端点: ${{ env.CF_API }}"
        echo "已自动生成应用名称: $DEFAULT_APP_NAME"

    - name: 登录并自动选择组织和空间
      run: |
        cf login -a ${{ env.CF_API }} -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}"
        
        echo "登录成功，开始自动检测组织和空间..."
        
        SELECTED_ORG=$(cf orgs | awk 'NR>3 {print $1; exit}')
        
        if [ -z "$SELECTED_ORG" ]; then
          echo "错误：未能在您的账户下找到任何可用的组织。"
          exit 1
        fi
        
        echo "已自动选择组织: $SELECTED_ORG"
        cf target -o "$SELECTED_ORG"
        
        SELECTED_SPACE=$(cf spaces | awk 'NR>3 {print $1; exit}')
        
        if [ -z "$SELECTED_SPACE" ]; then
          echo "错误：在组织 '$SELECTED_ORG' 中未找到任何可用的空间。"
          exit 1
        fi
        
        echo "已自动选择空间: $SELECTED_SPACE"
        cf target -s "$SELECTED_SPACE"
        
        echo "----------------------------------------"
        echo "当前部署目标确认:"
        cf target
        echo "----------------------------------------"
        
        echo "SELECTED_ORG=$SELECTED_ORG" >> $GITHUB_ENV
        echo "SELECTED_SPACE=$SELECTED_SPACE" >> $GITHUB_ENV

    - name: 部署应用 (不绑定路由)
      run: |
        echo "开始部署测试应用: ${{ env.APP_NAME }}"
        echo "使用镜像: ${{ env.DOCKER_IMAGE }}"
        
        # 使用 128M 内存和 --no-route 部署
        cf push ${{ env.APP_NAME }} --docker-image ${{ env.DOCKER_IMAGE }} -m ${{ env.MEMORY }} --health-check-type port --no-route --no-start

    - name: 绑定域名并设置路由
      run: |
        echo "为应用 ${{ env.APP_NAME }} 绑定域名并设置路由..."
        
        CFIP_VALUE="${{ secrets.CFIP }}"
        if [ -z "$CFIP_VALUE" ]; then
          # 使用 cf domains 确认的共享域名
          CFIP_VALUE="cfapps.us10-001.hana.ondemand.com"
          echo "未提供 CFIP，使用默认值: $CFIP_VALUE"
        fi
        
        # 绑定应用到指定的域名
        cf map-route ${{ env.APP_NAME }} $CFIP_VALUE --hostname ${{ env.APP_NAME }}

    - name: 设置环境变量 (为后续启动做准备)
      run: |
        echo "为应用 ${{ env.APP_NAME }} 设置环境变量..."
        
        # 注意：即使是 Nginx 测试，我们也保留设置环境变量的步骤，以确保工作流的完整性
        # 如果测试成功，回退时这些变量就是正确的
        
        cf set-env ${{ env.APP_NAME }} NAME "Hysteria2"
        cf set-env ${{ env.APP_NAME }} UUID "${{ secrets.UUID }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_SERVER "${{ secrets.NEZHA_SERVER }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_KEY "${{ secrets.NEZHA_KEY }}"
        cf set-env ${{ env.APP_NAME }} SUB_PATH "${{ secrets.SUB_PATH }}"
        cf set-env ${{ env.APP_NAME }} CFPORT "${{ secrets.CFPORT }}"
        cf set-env ${{ env.APP_NAME }} CHAT_ID "${{ secrets.CHAT_ID }}"
        cf set-env ${{ env.APP_NAME }} BOT_TOKEN "${{ secrets.BOT_TOKEN }}"
        cf set-env ${{ env.APP_NAME }} ARGO_PORT "${{ secrets.ARGO_PORT }}"

        # 处理 ARGO_AUTH
        if echo "${{ secrets.ARGO_AUTH }}" | grep -q '\n'; then
          echo "检测到组合格式的 ARGO_AUTH，将自动解析域名和Token..."
          ARGO_DOMAIN_VALUE=$(echo "${{ secrets.ARGO_AUTH }}" | head -n 1)
          ARGO_AUTH_VALUE=$(echo "${{ secrets.ARGO_AUTH }}" | tail -n +2)
          cf set-env ${{ env.APP_NAME }} ARGO_DOMAIN "$ARGO_DOMAIN_VALUE"
          cf set-env ${{ env.APP_NAME }} ARGO_AUTH "$ARGO_AUTH_VALUE"
        else
          echo "使用独立的 ARGO_DOMAIN 和 ARGO_AUTH secrets..."
          cf set-env ${{ env.APP_NAME }} ARGO_DOMAIN "${{ secrets.ARGO_DOMAIN }}"
          cf set-env ${{ env.APP_NAME }} ARGO_AUTH "${{ secrets.ARGO_AUTH }}"
        fi

        # 重新获取并设置 CFIP
        CFIP_VALUE="${{ secrets.CFIP }}"
        if [ -z "$CFIP_VALUE" ]; then
          CFIP_VALUE="cfapps.us10-001.hana.ondemand.com"
        fi
        cf set-env ${{ env.APP_NAME }} CFIP "$CFIP_VALUE"
        
        # Hysteria2 部署特有配置
        cf set-env ${{ env.APP_NAME }} HYSTERIA2_SERVER_NAME "$CFIP_VALUE"
        cf set-env ${{ env.APP_NAME }} HYSTERIA2_LISTEN_PORT 443
        cf set-env ${{ env.APP_NAME }} HYSTERIA2_PROTOCOL "websocket"
        
        if [ "${{ github.event.inputs.is_direct_connect }}" = "true" ]; then
          echo "已选择“直连镜像”模式，开始自动配置 DOMAIN 环境变量..."
          ROUTE=$(cf app ${{ env.APP_NAME }} | grep "routes:" | awk '{print $2}')
          if [ -n "$ROUTE" ]; then
            echo "已设置 DOMAIN 环境变量为: $ROUTE"
            cf set-env ${{ env.APP_NAME }} DOMAIN "$ROUTE"
          else
            echo "警告：未找到应用路由，无法自动设置 DOMAIN, 请在部署成功后手动将节点配置里的address、host和sni改为应用域名"
          fi
        fi
        
        echo "环境变量设置完成。"

    - name: 启动应用以应用环境变量
      run: |
        echo "正在启动测试应用并应用所有环境变量..."
        cf start ${{ env.APP_NAME }}

    - name: 详细部署信息
      run: |
        echo "----------------------------------------"
        echo "部署完成！正在验证应用状态..."
        cf app ${{ env.APP_NAME }}
        
        APP_URL=$(cf app ${{ env.APP_NAME }} | grep "routes:" | awk '{print $2}')
        
        echo "----------------------------------------"
        echo "测试部署结果："
        echo "应用名称 (App Name): ${{ env.APP_NAME }}"
        
        if [ -n "$APP_URL" ]; then
          echo "状态：成功。您的 CF 环境是健康的！"
          echo "应用 URL (APP_URL): https://$APP_URL"
          echo "您可以访问该 URL 看到 Nginx 的欢迎页面。"
          echo "----------------------------------------"
          echo "下一步：请将 DOCKER_IMAGE 恢复到 Hysteria2 镜像，并尝试部署一个更小、更兼容的 Hysteria2 镜像。"
        else
          echo "状态：失败。即使是 Nginx 测试应用也未能启动。"
          echo "----------------------------------------"
          echo "下一步：这表明您的 SAP BTP 账户有我们无法解决的深层平台限制，您需要联系 SAP BTP 支持人员。"
        fi
        echo "----------------------------------------"
